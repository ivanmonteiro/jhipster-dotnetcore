<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%
let hasDto = dto === 'mapstruct';
%>
<%_ if (hasDto) { _%>
using AutoMapper;
<%_ } _%>
using System.Collections.Generic;
using System.Threading.Tasks;
using JHipsterNet.Pagination;
using JHipsterNet.Pagination.Extensions;
using <%= namespace %>.Data;
using <%= namespace %>.Data.Extensions;
using <%= namespace %>.Models;
<%_ if (hasDto) { _%>
using <%= namespace %>.Service.Dto;
using <%= namespace %>.Service.Mapper;
<%_ } _%>
using <%= namespace %>.Web.Extensions;
using <%= namespace %>.Web.Filters;
using <%= namespace %>.Web.Rest.Problems;
using <%= namespace %>.Web.Rest.Utilities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace <%= namespace %>.Service {

    public class <%= pascalizedEntityClass %>Service : I<%= pascalizedEntityClass %>Service {
        private const string EntityName = "<%= camelCasedEntityClass %>";

        private readonly ApplicationDatabaseContext _applicationDatabaseContext;
        <%_ if (hasDto) { _%>
        private readonly IMapper _mapper;
        <%_ } _%>
        private readonly ILogger<<%= pascalizedEntityClass %>Controller> _log;

        public <%= pascalizedEntityClass %>Service(
            ILogger<<%= pascalizedEntityClass %>Controller> log,
            <%_ if (hasDto) { _%>
            IMapper mapper,
            <%_ } _%>
            ApplicationDatabaseContext applicationDatabaseContext)
        {
            _log = log;
            <%_ if (hasDto) { _%>
            _mapper = mapper;
            <%_ } _%>
            _applicationDatabaseContext = applicationDatabaseContext;
        }

        public async Task<<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>> Save(<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %> <%= hasDto ? asDto(camelCasedEntityClass) : camelCasedEntityClass %>)
        {
            <%_ if (hasDto) { _%>
            <%= pascalizedEntityClass %> <%= camelCasedEntityClass %> = _mapper.Map<<%= pascalizedEntityClass %>>(<%= asDto(camelCasedEntityClass) %>);
            <%_ } _%>
            <%_ if (relationships.length != 0) { _%>
            _applicationDatabaseContext.AddGraph(<%= camelCasedEntityClass %>);
            <%_ } else { _%>
            _applicationDatabaseContext.<%= pascalizedEntityClassPlural %>.Add(<%= camelCasedEntityClass %>);
            <%_ } _%>
            await _applicationDatabaseContext.SaveChangesAsync();

            <%_ if (hasDto) { _%>
            _mapper.Map<<%= asDto(pascalizedEntityClass) %>>(<%= camelCasedEntityClass %>);
            <%_ } else { _%>
            return <%= camelCasedEntityClass %> %>;
            <%_ } _%>
        }

        public async Task<IPage<<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>>> FindAll(IPageable pageable)
        {
            var page = await _applicationDatabaseContext.<%= pascalizedEntityClassPlural %>
            <%_ relationships.forEach( relationship => {
                if (relationship.relationshipType === 'many-to-one' || relationship.relationshipType === 'one-to-one') { _%>
                .Include(<%= camelCasedEntityClass %> => <%= camelCasedEntityClass %>.<%= relationship.relationshipFieldNamePascalized %>)
                <%_ }
            }); _%>
            <%_ if (hasDto) { _%>
                .UsePageableAsDtoAsync<<%= pascalizedEntityClass %>, <%= asDto(pascalizedEntityClass) %>>(pageable, _mapper);
            <%_ } else { _%>
                .UsePageableAsync(pageable);
            <%_ }_%>
            return page;
        }

        public async Task<<%= hasDto ? asDto(pascalizedEntityClass) : pascalizedEntityClass %>> FindOne(Long id)
        {
            var result = await _applicationDatabaseContext.<%= pascalizedEntityClassPlural %>
            <%_ relationships.forEach( relationship => {
                if (relationship.relationshipType === 'many-to-one' || relationship.relationshipType === 'one-to-one') { _%>
                .Include(<%= camelCasedEntityClass %> => <%= camelCasedEntityClass %>.<%= relationship.relationshipFieldNamePascalized %>)
                <%_ } else if (relationship.relationshipType === 'many-to-many' && relationship.ownerSide) { _%>
                .Include(<%= camelCasedEntityClass %> => <%= camelCasedEntityClass %>.<%= relationship.joinEntityFieldNamePascalizedPlural %>)
                    .ThenInclude(<%= relationship.joinEntityNameCamelCased %> => <%= relationship.joinEntityNameCamelCased %>.<%= relationship.otherEntityNamePascalized %>)
                <%_ }
            }); _%>
                .SingleOrDefaultAsync(<%= camelCasedEntityClass %> => <%= camelCasedEntityClass %>.Id == id);
            <%_ if (hasDto) { _%>
            return _mapper.Map<<%= asDto(pascalizedEntityClass) %>>(result);
            <%_ } else { _%>
            return result;
            <%_ }_%>
        }

        public async Task Delete(Long id)
        {
            _log.LogDebug($"REST request to delete <%= pascalizedEntityClass %> : {id}");
            _applicationDatabaseContext.<%= pascalizedEntityClassPlural %>.RemoveById(id);
            await _applicationDatabaseContext.SaveChangesAsync();
        }
    }
}
